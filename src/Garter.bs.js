// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Garter_Array = require("./Garter_Array.bs.js");
var Garter_Vector = require("@namenu/garter-vector/src/Garter_Vector.bs.js");

function isEmpty(v) {
  return Garter_Vector.length(v) === 0;
}

function max(v) {
  return Garter_Array.max(Garter_Vector.toArray(v));
}

function groupBy(xs, keyFn, id) {
  var empty = Belt_Map.make(id);
  return Belt_Map.map(Garter_Vector.reduce(xs, empty, (function (res, x) {
                    return Belt_Map.updateU(res, Curry._1(keyFn, x), (function (v) {
                                  if (v !== undefined) {
                                    return {
                                            hd: x,
                                            tl: v
                                          };
                                  } else {
                                    return {
                                            hd: x,
                                            tl: /* [] */0
                                          };
                                  }
                                }));
                  })), Belt_List.toArray);
}

function frequencies(ar, id) {
  return Belt_Map.map(groupBy(ar, (function (x) {
                    return x;
                  }), id), (function (prim) {
                return prim.length;
              }));
}

var Vector = {
  make: Garter_Vector.make,
  length: Garter_Vector.length,
  push: Garter_Vector.push,
  pop: Garter_Vector.pop,
  peek: Garter_Vector.peek,
  get: Garter_Vector.get,
  getExn: Garter_Vector.getExn,
  set: Garter_Vector.set,
  setExn: Garter_Vector.setExn,
  map: Garter_Vector.map,
  keep: Garter_Vector.keep,
  reduce: Garter_Vector.reduce,
  fromArray: Garter_Vector.fromArray,
  toArray: Garter_Vector.toArray,
  debug: Garter_Vector.debug,
  isEmpty: isEmpty,
  max: max,
  groupBy: groupBy,
  frequencies: frequencies
};

var $$Array;

var Id;

var Int;

var List;

var Obj;

var Queue;

var $$Set;

var $$String;

exports.$$Array = $$Array;
exports.Id = Id;
exports.Int = Int;
exports.List = List;
exports.Obj = Obj;
exports.Queue = Queue;
exports.$$Set = $$Set;
exports.$$String = $$String;
exports.Vector = Vector;
/* No side effect */
