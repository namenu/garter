// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Set = require("bs-platform/lib/js/belt_Set.js");
var Garter_Vector = require("@namenu/garter-vector/src/Garter_Vector.bs.js");

function fromVector(v, id) {
  return Belt_Set.fromArray(Garter_Vector.toArray(v), id);
}

function toVector(s) {
  return Garter_Vector.fromArray(Belt_Set.toArray(s));
}

var Int = Belt_Set.Int;

var $$String = Belt_Set.$$String;

var Dict = Belt_Set.Dict;

var make = Belt_Set.make;

var fromArray = Belt_Set.fromArray;

var fromSortedArrayUnsafe = Belt_Set.fromSortedArrayUnsafe;

var isEmpty = Belt_Set.isEmpty;

var has = Belt_Set.has;

var add = Belt_Set.add;

var mergeMany = Belt_Set.mergeMany;

var remove = Belt_Set.remove;

var removeMany = Belt_Set.removeMany;

var union = Belt_Set.union;

var intersect = Belt_Set.intersect;

var diff = Belt_Set.diff;

var subset = Belt_Set.subset;

var cmp = Belt_Set.cmp;

var eq = Belt_Set.eq;

var forEachU = Belt_Set.forEachU;

var forEach = Belt_Set.forEach;

var reduceU = Belt_Set.reduceU;

var reduce = Belt_Set.reduce;

var everyU = Belt_Set.everyU;

var every = Belt_Set.every;

var someU = Belt_Set.someU;

var some = Belt_Set.some;

var keepU = Belt_Set.keepU;

var keep = Belt_Set.keep;

var partitionU = Belt_Set.partitionU;

var partition = Belt_Set.partition;

var size = Belt_Set.size;

var toArray = Belt_Set.toArray;

var toList = Belt_Set.toList;

var minimum = Belt_Set.minimum;

var minUndefined = Belt_Set.minUndefined;

var maximum = Belt_Set.maximum;

var maxUndefined = Belt_Set.maxUndefined;

var get = Belt_Set.get;

var getUndefined = Belt_Set.getUndefined;

var getExn = Belt_Set.getExn;

var split = Belt_Set.split;

var checkInvariantInternal = Belt_Set.checkInvariantInternal;

var getData = Belt_Set.getData;

var getId = Belt_Set.getId;

var packIdData = Belt_Set.packIdData;

var V;

exports.Int = Int;
exports.$$String = $$String;
exports.Dict = Dict;
exports.make = make;
exports.fromArray = fromArray;
exports.fromSortedArrayUnsafe = fromSortedArrayUnsafe;
exports.isEmpty = isEmpty;
exports.has = has;
exports.add = add;
exports.mergeMany = mergeMany;
exports.remove = remove;
exports.removeMany = removeMany;
exports.union = union;
exports.intersect = intersect;
exports.diff = diff;
exports.subset = subset;
exports.cmp = cmp;
exports.eq = eq;
exports.forEachU = forEachU;
exports.forEach = forEach;
exports.reduceU = reduceU;
exports.reduce = reduce;
exports.everyU = everyU;
exports.every = every;
exports.someU = someU;
exports.some = some;
exports.keepU = keepU;
exports.keep = keep;
exports.partitionU = partitionU;
exports.partition = partition;
exports.size = size;
exports.toArray = toArray;
exports.toList = toList;
exports.minimum = minimum;
exports.minUndefined = minUndefined;
exports.maximum = maximum;
exports.maxUndefined = maxUndefined;
exports.get = get;
exports.getUndefined = getUndefined;
exports.getExn = getExn;
exports.split = split;
exports.checkInvariantInternal = checkInvariantInternal;
exports.getData = getData;
exports.getId = getId;
exports.packIdData = packIdData;
exports.V = V;
exports.fromVector = fromVector;
exports.toVector = toVector;
/* No side effect */
